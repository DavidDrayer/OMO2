<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
	
	<xsl:include href="/xslt/format_node.php" />
 
    <xsl:template match="/">
        <html>
            <body>
                     <xsl:apply-templates select="root" />

            </body>
        </html>
    </xsl:template>

    <xsl:template match="root">
		<h1><xsl:value-of select="name" /></h1>
       
        <ul class='detail_list_role'>
            <xsl:apply-templates select="children[type='1']" />
            <xsl:apply-templates select="children[type='3']" ><xsl:with-param name="elem" select="'1'" /></xsl:apply-templates>
        </ul>

        
        <ul class='detail_list_circle'>
            <xsl:apply-templates select="children[type='2']" />
             <xsl:apply-templates select="children[type='3']" ><xsl:with-param name="elem" select="'2'" /></xsl:apply-templates>
       </ul>

    </xsl:template> 

    <xsl:template match="children[type='3']">
		<xsl:param name="elem" select="'all'" />
		<span class='detail_list_group'>
			<xsl:attribute name="title">
                    <xsl:value-of select="name" />
					</xsl:attribute>
		  <xsl:if test="$elem = '1'">
			<xsl:apply-templates select="children[type='1']" />
            <xsl:apply-templates select="children[type='3']" ><xsl:with-param name="elem" select="'1'" /></xsl:apply-templates>
 		 </xsl:if>
		  <xsl:if test="$elem = '2'">
			<xsl:apply-templates select="children[type='2']" />
            <xsl:apply-templates select="children[type='3']" ><xsl:with-param name="elem" select="'2'" /></xsl:apply-templates>
 		 </xsl:if>
		  <xsl:if test="$elem = 'all'">
			<xsl:apply-templates select="children[type='1']" />
            <xsl:apply-templates select="children[type='3']" ><xsl:with-param name="elem" select="'1'" /></xsl:apply-templates>
			<xsl:apply-templates select="children[type='2']" />
            <xsl:apply-templates select="children[type='3']" ><xsl:with-param name="elem" select="'2'" /></xsl:apply-templates>
 		 </xsl:if>
 		 </span>

	</xsl:template> 

     
     <xsl:template match="children[type='2']">
        <li style='background:rgba(0,0,0,0.05); border-radius:5px; margin-bottom:3px;'>
			<xsl:attribute name="class">
                    node_<xsl:value-of select="ID" />
			</xsl:attribute>
            <span class='navTo'><xsl:attribute name="data-src">
                    <xsl:value-of select="ID" />
					</xsl:attribute><h2 style='padding:0px; margin:0px;'>
					<xsl:value-of select="name" />
					</h2>
 					<xsl:apply-templates select="data" />
               </span>

 
        <ul class='detail_list_role'>
            <xsl:apply-templates select="children[type='1']" />
              <xsl:apply-templates select="children[type='3']" ><xsl:with-param name="elem" select="'1'" /></xsl:apply-templates>
      </ul>
        
        
        <ul class='detail_list_circle'>
            <xsl:apply-templates select="children[type='2']" />
             <xsl:apply-templates select="children[type='3']" ><xsl:with-param name="elem" select="'2'" /></xsl:apply-templates>
       </ul>

       </li>
    </xsl:template>

     <xsl:template match="children[type='1']">
        <li >
			<xsl:attribute name="class">
                    node_<xsl:value-of select="ID" />
			</xsl:attribute>
            <span class='navTo'><xsl:attribute name="data-src">
                    <xsl:value-of select="ID" />
					</xsl:attribute>
					<xsl:value-of select="name" />
                
                </span>
                <xsl:apply-templates select="data" />

       </li>
    </xsl:template>

       <!-- Template pour <data> -->
    <xsl:template match="data">
        <div class="data">
				<xsl:apply-templates />
				
        </div>
    </xsl:template>
    
       <xsl:template name="replace-newline">
        <xsl:param name="text" />

        <!-- Vérifie s'il reste un saut de ligne -->
        <xsl:choose>
            <xsl:when test="contains($text, '&#10;')">
                <!-- Partie avant le saut de ligne -->
                <xsl:value-of select="substring-before($text, '&#10;')" />
                <br />
                <!-- Appel récursif pour traiter le reste -->
                <xsl:call-template name="replace-newline">
                    <xsl:with-param name="text" select="substring-after($text, '&#10;')" />
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <!-- Si aucun saut de ligne, affiche le texte restant -->
                <xsl:value-of select="$text" />
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
 
</xsl:stylesheet>
